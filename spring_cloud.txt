Spring cloud学习记录
1.网站架构演变过程
	从传统架构（单点应用）->分布式架构（以项目区分）->SOA架构（面向服务架构）->微服务架构

传统架构：SSH，SSM

分布式结构：
	由传统演变而来
	将传统项目以项目模块拆分。通过RPC远程通信
	每个子项目都有自己独立的数据库等
	
	总结区别：项目粒度更加精细，低耦合。
	（很多以maven聚合项目开发）
	多个JVM互相通讯

SOA架构（面向服务的架构）:
		可以理解为面向业务逻辑层，将共同业务代码抽取，提供给其他接口进行调	用。	服务间通讯采用RPC远程调用。
		*服务概念：将共同的业务逻辑进行拆分，拆分成多里的项目进行部署
		
	SOA特点：底层基于soap或者esb（消息总线）实现，底层使用jhttp，https实现

微服务架构产生的原因：
	微服务架构是基于SOA架构演变而来，
SOA缺点：
	1.依赖于中心的服务发现机制。
	2.SOA架构采用SOAP（http+xml）xml传输协议占用宽带太多，不适合高并发，所有微服务中以json替代xml。
	3.服务管理混乱，缺少服务的管理和治理

微服务架构模式：
	比soa粒度更加精细，提高效率
	服务之间互不影响
	每个服务独立部署（Docker）
	采用restful风格提供api
	适于敏捷开发

为什么要用springcloud？
	1.目前比较完善的微服务解决方案框架，不像其他rpc远程调用，只是解决
	某个微服务中的问题。
	2。微服务中：
		分布式配置中心
		分布式锁
		分布式跟踪
		分布式服务治理
		分布式任务调度中心

二，springcloud简介
包含：服务治理，注册中心，配置管理，断路器，智能路由···
包含众多的子项目
springcloud config分布式配置中心
springcloud netflix核心组件
	eureka：服务治理 注册中心
	hystrix：服务保护
	ribbon：客户端负载均衡器
	feign： 基于ribbon和hystrix的声明式服务调用组件
	zuul：网关组件，提供路由选择，访问过滤等

三。注册中心集群
	1.如果注册中心挂了？？怎么办？
		搭建注册中心集群，
	2.搭建eureka集群，至少2台以上
		思路：原理：相互注册，形成一组相互注册中心，实现数据的相互同步，	达到高可用效果

四。ribbon与nginx负载均衡的区别
		ribbon是本地负载均衡，在调用接口的时候，在注册中心获取注册信息列		表，缓存在jvm本地，相反鱼在本地实现rpc调用。适合于微服务rpc
		nginx是服务器负载均衡，客户端所有请求交给nginx，由nginx实现转		发。适合于服务器端，如：tomcat
掌握：
springcloud
服务注册与发现
搭建eureka，zookeeper，consul注册中心
服务集群
使用rest template调用服务
ribbon负载均衡
搭建feign客户端依赖聚合项目
Feign客户端调用（默认支持ribbon）
hysrtix服务保护框架:服务降级，断路器，服务隔离



不讲的东西：
分布式锁
分布式任务调度平台
分布式事务
分布式日志收集
